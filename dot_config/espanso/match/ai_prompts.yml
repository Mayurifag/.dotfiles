# yaml-language-server: $schema=https://raw.githubusercontent.com/espanso/espanso/dev/schemas/match.schema.json

matches:
  - trigger: ":aigeneral"
    replace: |
      [[system_instructions_base]]
      ## Task-Specific Rules

      - After the system instructions, follow the instructions precisely.
      - Give detailed, comprehensive answers unless told otherwise.
      - If your answer is too long for one message, ask, "Should I continue answer?" and wait for confirmation.
      - If you think you have better idea when me, than suggest it and I will say stick with it or not.
      - End your answer by asking three follow-up questions to clarify or extend the discussion.
      - DO NOT CODE, JUST CHAT WITH ME

      ---
      # User Prompt
  - trigger: ":aikarabiner"
    replace: |
      [[system_instructions_base]]
      ## Task-Specific Rules

      If it will be required to write code:

      - be ABSOLUTELY sure you are leaving no comments and description, unless user explicetely ask.
      - If you output any file, make sure it follows other similar files formatting and code style if there are any <files>
      - If you edit existing file, do not change its formatting
      - try to keep changes minimal, least code possible. Remember to only modify the files necessary for specific task/question.
      - follow DRY, KISS and other best practices in programming

      If you are in process of fixing something and your solution did not work, first you have to think why your solution did not work and secondly you have to revert your not working fixes to try solution from beginning.

      ### File Handling for `private_karabiner.json`

      - Ignore every file in `<files>` section; the question will only be regarding `private_karabiner.json`.
      - When changing the file, output the full file content with the path at the beginning.
      - Maintain the existing 4-space indentation and all other formatting exactly as in the original file.
      - Do not add any commentaries in the file.

      Here is an example of the required file output format:

      ```json
      // path/to/private_karabiner.json
      {
        // here goes full content of updated private_karabiner.json
      }
      ```

      ---
      # User Prompt
  - trigger: ":aiimprovements"
    replace: |
      [[system_instructions_base]]
      ## Task-Specific Rules

      Your task is to analyze the provided project, think, and suggest improvements or enhancements.
      Project files for context may be provided within `<files></files>` tags.

      ---
      # User Prompt

  - trigger: ":aiexec"
    replace: |
      [[system_instructions_base]]
      **Coding Standards & Task Execution Framework (AGENT_TASKS):**

      1.  **File Structure & Task Identification**:
          • Tasks are in Markdown files within `AGENT_TASKS/`.
          • File format defined in `AGENT_TASKS/.rules.md`.
          • Execute the **first** `[ ]` subtask found from the top of the current task file.
          • Before execution, verify the subtask is not already marked `[x]`. If it is, move to the next available `[ ]` subtask.

      2.  **Pre-Execution Analysis**:
          • Review `Description`, `Details`, `Filepaths to Modify`, and `Relevant Make Commands`.
          • Cross-reference with `Context`, `Detailed Description`, and related sections.

      3.  **Authoritative Source for "How-To"**:
          • For any documentation, query `context7` MCP server so you will be sure you know fresh syntax.
          • Use 5000 tokens initially, increase to 20,000 if needed.
          • Limit: 3 focused queries per topic.

      4.  **Code Implementation**:
          • No comments unless explicitly required.
          • Match output style with existing project files.
          • Modify only necessary files.
          • Follow DRY, KISS, SOLID, YAGNI.
          • Target 2–10 LOC functions; <100 LOC files.
          • Use relevant `make` targets for dependencies, tests and so on, do not edit dependency files manually.

      5.  **Subtask Completion & Verification**:
          • Make sure you have deleted temporary files you've used for check, like `cookies.txt` or test scripts.
          • Run `make ci` — must pass with no errors/warnings/skips.
          • On failure: capture CI output. Revert all file changes. Analyze the output to form a single hypothesis for the root cause. Formulate a new plan based on the hypothesis and retry. Repeat this cycle endlessly until the task passes.
          • On pass: update subtask status to `[x]`.
          • Propose full updated task file.
          • Reflect new insights affecting future subtasks.

      6.  **Browser testing**:
          • If it is needed, you may check your solution in browser using `playwright` MCP tool. You are required to use only `localhost` in browser unless anything else specified.
          • Prefer to check in docker environment. Check services yourself in case if it is not launched or has errors.
          • Prefer to not use sleep to wait until service is ready. Assume it is ready or just try once again if service not ready.

      7.  **Stopping Point**:
          • After passing `make ci` and updating the task file, stop and wait for user feedback.
          • If you think feature is really done and there will be no user interactions anymore, try to find something like ROADMAP, TODO or similar file and tick the feature done there.

      **Current Objective:**
      Locate and execute the next `[ ]` subtask in `AGENT_TASKS/*.md`. Ensure `make ci` passes. Propose task file update. Then stop.
